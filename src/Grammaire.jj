/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Grammaire.jj */
/*@egen*//**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */

PARSER_BEGIN(EG1)

public class EG1/*@bgen(jjtree)*/implements EG1TreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTEG1State jjtree = new JJTEG1State();

/*@egen*/
   public static void main(String[] args) throws ParseException {
    Scanner sc = new Scanner(System.in);
    String text = sc.nextLine();
	EG1 parser = new EG1(new java.io.StringReader(text));
	SimpleNode root = parser.start();
    root.dump("");
  }
}

PARSER_END(EG1)

SKIP :
{
 "\r"
| "\t"
| "\n"
}

TOKEN : /* OPERATORS */
{
  < PLUS : "+" >
| < MINUS : "-" >
| < TIMES : "*" >
| < DIVIDE : "/" >
| < RECURSION : "rec" >
| < POINT : "." >
| < SPACE : " " >
| < IF : "if" >
| < THEN : "then" >
| < ELSE : "else" >
| < EGAL : "=" >
| < LAMBDA : "!" >
}

TOKEN :
{
  < NUMBER : (<DIGIT>)+  >
| 
  < VARIABLE : <LETTER> (< LETTER >|< DIGIT >)*  >
|
  < LEFT_PAREN : "(" >
|
  < RIGHT_PAREN : ")" >

}


TOKEN :
{
  <#DIGIT: ["0"-"9"]>
| <#LETTER: ["a"-"z", "A"-"Z"]>
}

int start()        :
{/*@bgen(jjtree) START */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) START */
   try {
/*@egen*/
   term() 
    (
      binary_operator() term()
    )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/   // "well formed formula"  
  {
    return 0;  // returns 0 on successful parse
  }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void term()      :
{/*@bgen(jjtree) VAR */
  SimpleNode jjtn000 = new SimpleNode(JJTVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VAR */
  try {
/*@egen*/
  symbol()  
|
  < LEFT_PAREN >  term()(binary_operator() term())* < RIGHT_PAREN >
|
  < MINUS >|< LAMBDA > term()  // Unary minus
|
  binary_operator() (term())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/

}

void binary_operator()            :
{/*@bgen(jjtree) OPERATEUR */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERATEUR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OPERATEUR */
  try {
/*@egen*/
  < PLUS >
| < MINUS >  // binary minus
| < TIMES >
| < DIVIDE >
| < RECURSION >
| < POINT >
| < IF >
| < THEN >
| < ELSE >
| < EGAL >
| < SPACE >
| < LAMBDA >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
  

void symbol()     :
{/*@bgen(jjtree) ID */
 SimpleNode jjtn000 = new SimpleNode(JJTID);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;
}
{/*@bgen(jjtree) ID */
  try {
/*@egen*/
  t= < NUMBER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    // Not necessary for parser construction - debugging code
    System.out.println("matched number: "+t);
  }
| 
  t= < VARIABLE >/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/  {System.out.println("matched variable: "+t);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}