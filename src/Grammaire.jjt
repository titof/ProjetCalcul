/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */

PARSER_BEGIN(EG1)

public class EG1
{
   public static void main(String[] args) throws ParseException {
    Scanner sc = new Scanner(System.in);
    String text = sc.nextLine();
	EG1 parser = new EG1(new java.io.StringReader(text));
	SimpleNode root = parser.start();
    root.dump("");
  }
}

PARSER_END(EG1)

SKIP :
{
 "\r"
| "\t"
| "\n"
}

TOKEN : /* OPERATORS */
{
  < PLUS : "+" >
| < MINUS : "-" >
| < TIMES : "*" >
| < DIVIDE : "/" >
| < RECURSION : "rec" >
| < POINT : "." >
| < SPACE : " " >
| < IF : "if" >
| < THEN : "then" >
| < ELSE : "else" >
| < EGAL : "=" >
| < LAMBDA : "!" >
}

TOKEN :
{
  < NUMBER : (<DIGIT>)+  >
| 
  < VARIABLE : <LETTER> (< LETTER >|< DIGIT >)*  >
|
  < LEFT_PAREN : "(" >
|
  < RIGHT_PAREN : ")" >

}


TOKEN :
{
  <#DIGIT: ["0"-"9"]>
| <#LETTER: ["a"-"z", "A"-"Z"]>
}

int start() #START :
{}
{
   term() 
    (
      binary_operator() term()
    )*   // "well formed formula"  
  {
    return 0;  // returns 0 on successful parse
  }
}

void term() #VAR :
{}
{
  symbol()  
|
  < LEFT_PAREN >  term()(binary_operator() term())* < RIGHT_PAREN >
|
  < MINUS >|< LAMBDA > term()  // Unary minus
|
  binary_operator() (term())*

}

void binary_operator() #OPERATEUR :
{}
{
  < PLUS >
| < MINUS >  // binary minus
| < TIMES >
| < DIVIDE >
| < RECURSION >
| < POINT >
| < IF >
| < THEN >
| < ELSE >
| < EGAL >
| < SPACE >
| < LAMBDA >
}
  

void symbol() #ID :
{Token t;
}
{
  t= < NUMBER >
  {
    // Not necessary for parser construction - debugging code
    System.out.println("matched number: "+t);
  }
| 
  t= < VARIABLE >  {System.out.println("matched variable: "+t);}
}