// TODO: Auto-generated Javadoc
/* Generated By:JJTree: Do not edit this line. SimpleNode.java Version 4.3 */
/**
 * The Class SimpleNode.
 */
/* JavaCCOptions:MULTI=false,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class SimpleNode implements Node {

  /** The parent. */
  protected Node parent;
  
  /** The children. */
  protected Node[] children;
  
  /** The id. */
  protected int id;
  
  /** The value. */
  protected Object value;
  
  /** The parser. */
  protected Main parser;

  /**
   * Instantiates a new simple node.
   *
   * @param i the i
   */
  public SimpleNode(int i) {
    id = i;
  }

  /**
   * Instantiates a new simple node.
   *
   * @param p the p
   * @param i the i
   */
  public SimpleNode(Main p, int i) {
    this(i);
    parser = p;
  }

  /* (non-Javadoc)
   * @see Node#jjtOpen()
   */
  public void jjtOpen() {
  }

  /* (non-Javadoc)
   * @see Node#jjtClose()
   */
  public void jjtClose() {
  }

  /* (non-Javadoc)
   * @see Node#jjtSetParent(Node)
   */
  public void jjtSetParent(Node n) { parent = n; }
  
  /* (non-Javadoc)
   * @see Node#jjtGetParent()
   */
  public Node jjtGetParent() { return parent; }

  /* (non-Javadoc)
   * @see Node#jjtAddChild(Node, int)
   */
  public void jjtAddChild(Node n, int i) {
    if (children == null) {
      children = new Node[i + 1];
    } else if (i >= children.length) {
      Node c[] = new Node[i + 1];
      System.arraycopy(children, 0, c, 0, children.length);
      children = c;
    }
    children[i] = n;
  }

  /* (non-Javadoc)
   * @see Node#jjtGetChild(int)
   */
  public Node jjtGetChild(int i) {
    return children[i];
  }

  /* (non-Javadoc)
   * @see Node#jjtGetNumChildren()
   */
  public int jjtGetNumChildren() {
    return (children == null) ? 0 : children.length;
  }

  /**
   * Jjt set value.
   *
   * @param value the value
   */
  public void jjtSetValue(Object value) { this.value = value; }
  
  /**
   * Jjt get value.
   *
   * @return the object
   */
  public Object jjtGetValue() { return value; }

  /* You can override these two methods in subclasses of SimpleNode to
     customize the way the node appears when the tree is dumped.  If
     your output uses more than one line you should override
     toString(String), otherwise overriding toString() is probably all
     you need to do. */

  /* (non-Javadoc)
   * @see java.lang.Object#toString()
   */
  public String toString() { return MainTreeConstants.jjtNodeName[id]; }
  
  /**
   * To string.
   *
   * @param prefix the prefix
   * @return the string
   */
  public String toString(String prefix) { return prefix + toString(); }

  /* Override this method if you want to customize how the node dumps
     out its children. */

  /**
   * Dump.
   *
   * @param prefix the prefix
   * @return the string
   */
  public String dump(String prefix) {
	String fin=toString(prefix);
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        SimpleNode n = (SimpleNode)children[i];
        if (n != null) {
          fin+="\n"+n.dump(prefix + " ");
        }
      }
    }
    return fin;
  }
}

/* JavaCC - OriginalChecksum=a7442abed49daa4e8be3f899e266d239 (do not edit this line) */
